syntax = "proto3";
// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative  goulette.proto

package goulette;

option go_package = "github.com/ailkaya/goulette/proto";

// Broker服务定义
service BrokerService {
  // 发送消息（双向流）
  rpc SendMessage(stream MessageRequest) returns (stream MessageResponse);
  
  // 拉取消息（流式）
  rpc PullMessage(PullRequest) returns (stream Message);
  
  // 复制Fragment文件
  rpc ReplicateFragment(stream FragmentChunk) returns (ReplicateResponse);
  
  // 移除Topic
  rpc RemoveTopic(RemoveTopicRequest) returns (RemoveTopicResponse);
  
  // 设置Topic角色（Leader/Follower）
  rpc SetTopicRole(SetTopicRoleRequest) returns (SetTopicRoleResponse);
  
  // Raft相关RPC调用
  rpc HandleRaftRequest(RaftRequest) returns (RaftResponse);
  rpc SendRaftMessage(stream RaftMessage) returns (stream RaftMessage);
  
  // 获取Broker在指定Topic中的角色
  rpc GetBrokerTopicRole(GetBrokerTopicRoleRequest) returns (GetBrokerTopicRoleResponse);
  
  // 请求复制Fragment到目标Broker
  rpc RequestFragmentReplication(RequestFragmentReplicationRequest) returns (RequestFragmentReplicationResponse);
}

// Sentinel服务定义
service SentinelService {
  // Broker心跳维持
  rpc KeepAlive(KeepAliveRequest) returns (KeepAliveResponse);
  
  // 查询Topic对应的Leader Broker
  rpc GetTopicLeader(GetTopicLeaderRequest) returns (GetTopicLeaderResponse);
  
  // 注册新Broker
  rpc RegisterBroker(RegisterBrokerRequest) returns (RegisterBrokerResponse);
  
  // Broker下线
  rpc UnregisterBroker(UnregisterBrokerRequest) returns (UnregisterBrokerResponse);
}

message Timestamp {
  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  int64 seconds = 1;

  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive.
  int32 nanos = 2;
}

// 消息请求
message MessageRequest {
  string topic = 1;
  bytes payload = 2;
  uint64 message_id = 3;
  Timestamp timestamp = 4;
  MessageType type = 5;
}

// 消息响应
message MessageResponse {
  uint64 message_id = 1;
  ResponseStatus status = 2;
  string error_message = 3;
}

// 拉取请求
message PullRequest {
  string topic = 1;
  uint64 offset = 2;
  uint32 batch_size = 3;
  string consumer_group = 4;
}

// 消息
message Message {
  uint64 message_id = 1;
  string topic = 2;
  bytes payload = 3;
  uint64 offset = 4;
  Timestamp timestamp = 5;
  MessageType type = 6;
}

// Fragment分片
message FragmentChunk {
  string topic = 1;
  uint64 fragment_id = 2;
  uint32 chunk_index = 3;
  bytes data = 4;
  bool is_last = 5;
  bytes checksum = 6;
}

// 复制响应
message ReplicateResponse {
  bool success = 1;
  string error_message = 2;
}

// 同步请求
message SyncRequest {
  string topic = 1;
  uint64 offset = 2;
  bytes data = 3;
  SyncType sync_type = 4;
}

// 同步响应
message SyncResponse {
  bool success = 1;
  uint64 offset = 2;
  string error_message = 3;
}

// 心跳请求
message KeepAliveRequest {
  string broker_id = 1;
  string address = 2;
  BrokerStatus status = 3;
}

// 心跳响应
message KeepAliveResponse {
  bool success = 1;
  string error_message = 2;
}

// 获取Topic Leader请求
message GetTopicLeaderRequest {
  string topic = 1;
  uint32 replica_count = 2;
  repeated string unreachable_brokers = 3;  // 无法连接的broker列表
}

// 获取Topic Leader响应
message GetTopicLeaderResponse {
  BrokerInfo leader = 1;
  string error_message = 2;
}

// 注册Broker请求
message RegisterBrokerRequest {
  string broker_id = 1;
  string address = 2;
  repeated string topics = 3;
}

// 注册Broker响应
message RegisterBrokerResponse {
  bool success = 1;
  string error_message = 2;
}

// 下线Broker请求
message UnregisterBrokerRequest {
  string broker_id = 1;
}

// 下线Broker响应
message UnregisterBrokerResponse {
  bool success = 1;
  string error_message = 2;
}

// 移除Topic请求
message RemoveTopicRequest {
  string topic = 1;
  string reason = 2;  // 移除原因
}

// 移除Topic响应
message RemoveTopicResponse {
  bool success = 1;
  string error_message = 2;
}

// 设置Topic角色请求
message SetTopicRoleRequest {
  string topic = 1;
  TopicRole role = 2;
  repeated string followers = 3;  // follower broker地址列表
  string leader_address = 4;      // leader broker地址
}

// 设置Topic角色响应
message SetTopicRoleResponse {
  bool success = 1;
  string error_message = 2;
}

// Raft请求
message RaftRequest {
  string topic = 1;
  string from_peer_id = 2;
  RaftMessageType message_type = 3;
  bytes payload = 4;  // 序列化的Raft消息
}

// Raft响应
message RaftResponse {
  string topic = 1;
  string to_peer_id = 2;
  RaftMessageType message_type = 3;
  bytes payload = 4;  // 序列化的Raft响应
  bool success = 5;
  string error_message = 6;
}

// Raft消息（用于流式传输）
message RaftMessage {
  string topic = 1;
  string from_peer_id = 2;
  string to_peer_id = 3;
  RaftMessageType message_type = 4;
  bytes payload = 5;  // 序列化的Raft消息
  int64 term = 6;
  int64 timestamp = 7;
}

// 获取Broker在指定Topic中的角色请求
message GetBrokerTopicRoleRequest {
  string broker_id = 1;
  string topic = 2;
}

// 获取Broker在指定Topic中的角色响应
message GetBrokerTopicRoleResponse {
  string broker_id = 1;
  string topic = 2;
  TopicRole role = 3;
  bool success = 4;
  string error_message = 5;
}

// Broker信息
message BrokerInfo {
  string broker_id = 1;
  string address = 2;
  BrokerStatus status = 3;
  repeated string topics = 4;
  Timestamp last_heartbeat = 5;
}

// 枚举定义
enum MessageType {
  MESSAGE_TYPE_UNSPECIFIED = 0;
  MESSAGE_TYPE_NORMAL = 1;
  MESSAGE_TYPE_PRIORITY = 2;
  MESSAGE_TYPE_DELAYED = 3;
}

enum ResponseStatus {
  RESPONSE_STATUS_UNSPECIFIED = 0;
  RESPONSE_STATUS_SUCCESS = 1;
  RESPONSE_STATUS_ERROR = 2;
  RESPONSE_STATUS_RETRY = 3;
}

enum SyncType {
  SYNC_TYPE_UNSPECIFIED = 0;
  SYNC_TYPE_MESSAGE = 1;
  SYNC_TYPE_FRAGMENT = 2;
  SYNC_TYPE_OFFSET = 3;
}

enum BrokerStatus {
  BROKER_STATUS_UNSPECIFIED = 0;
  BROKER_STATUS_HEALTHY = 1;
  BROKER_STATUS_SUSPICIOUS = 2;
  BROKER_STATUS_DOWN = 3;
}

enum TopicRole {
  TOPIC_ROLE_UNSPECIFIED = 0;
  TOPIC_ROLE_LEADER = 1;
  TOPIC_ROLE_FOLLOWER = 2;
}

enum RaftMessageType {
  RAFT_MESSAGE_TYPE_UNSPECIFIED = 0;
  RAFT_MESSAGE_TYPE_REQUEST_VOTE = 1;
  RAFT_MESSAGE_TYPE_REQUEST_VOTE_RESPONSE = 2;
  RAFT_MESSAGE_TYPE_APPEND_ENTRIES = 3;
  RAFT_MESSAGE_TYPE_APPEND_ENTRIES_RESPONSE = 4;
  RAFT_MESSAGE_TYPE_COMMAND = 5;
  RAFT_MESSAGE_TYPE_COMMAND_RESPONSE = 6;
}

// 请求复制Fragment的请求
message RequestFragmentReplicationRequest {
  string topic = 1;
  string target_broker_id = 2;
  string target_broker_address = 3;
  uint64 replica_index = 4;
  uint64 total_replicas = 5;
}

// 请求复制Fragment的响应
message RequestFragmentReplicationResponse {
  bool success = 1;
  string error_message = 2;
} 