// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.0--rc1
// source: proto/goulette.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 枚举定义
type MessageType int32

const (
	MessageType_MESSAGE_TYPE_UNSPECIFIED MessageType = 0
	MessageType_MESSAGE_TYPE_NORMAL      MessageType = 1
	MessageType_MESSAGE_TYPE_PRIORITY    MessageType = 2
	MessageType_MESSAGE_TYPE_DELAYED     MessageType = 3
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_UNSPECIFIED",
		1: "MESSAGE_TYPE_NORMAL",
		2: "MESSAGE_TYPE_PRIORITY",
		3: "MESSAGE_TYPE_DELAYED",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSPECIFIED": 0,
		"MESSAGE_TYPE_NORMAL":      1,
		"MESSAGE_TYPE_PRIORITY":    2,
		"MESSAGE_TYPE_DELAYED":     3,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_goulette_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_proto_goulette_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{0}
}

type ResponseStatus int32

const (
	ResponseStatus_RESPONSE_STATUS_UNSPECIFIED ResponseStatus = 0
	ResponseStatus_RESPONSE_STATUS_SUCCESS     ResponseStatus = 1
	ResponseStatus_RESPONSE_STATUS_ERROR       ResponseStatus = 2
	ResponseStatus_RESPONSE_STATUS_RETRY       ResponseStatus = 3
)

// Enum value maps for ResponseStatus.
var (
	ResponseStatus_name = map[int32]string{
		0: "RESPONSE_STATUS_UNSPECIFIED",
		1: "RESPONSE_STATUS_SUCCESS",
		2: "RESPONSE_STATUS_ERROR",
		3: "RESPONSE_STATUS_RETRY",
	}
	ResponseStatus_value = map[string]int32{
		"RESPONSE_STATUS_UNSPECIFIED": 0,
		"RESPONSE_STATUS_SUCCESS":     1,
		"RESPONSE_STATUS_ERROR":       2,
		"RESPONSE_STATUS_RETRY":       3,
	}
)

func (x ResponseStatus) Enum() *ResponseStatus {
	p := new(ResponseStatus)
	*p = x
	return p
}

func (x ResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_goulette_proto_enumTypes[1].Descriptor()
}

func (ResponseStatus) Type() protoreflect.EnumType {
	return &file_proto_goulette_proto_enumTypes[1]
}

func (x ResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseStatus.Descriptor instead.
func (ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{1}
}

type SyncType int32

const (
	SyncType_SYNC_TYPE_UNSPECIFIED SyncType = 0
	SyncType_SYNC_TYPE_MESSAGE     SyncType = 1
	SyncType_SYNC_TYPE_FRAGMENT    SyncType = 2
	SyncType_SYNC_TYPE_OFFSET      SyncType = 3
)

// Enum value maps for SyncType.
var (
	SyncType_name = map[int32]string{
		0: "SYNC_TYPE_UNSPECIFIED",
		1: "SYNC_TYPE_MESSAGE",
		2: "SYNC_TYPE_FRAGMENT",
		3: "SYNC_TYPE_OFFSET",
	}
	SyncType_value = map[string]int32{
		"SYNC_TYPE_UNSPECIFIED": 0,
		"SYNC_TYPE_MESSAGE":     1,
		"SYNC_TYPE_FRAGMENT":    2,
		"SYNC_TYPE_OFFSET":      3,
	}
)

func (x SyncType) Enum() *SyncType {
	p := new(SyncType)
	*p = x
	return p
}

func (x SyncType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_goulette_proto_enumTypes[2].Descriptor()
}

func (SyncType) Type() protoreflect.EnumType {
	return &file_proto_goulette_proto_enumTypes[2]
}

func (x SyncType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncType.Descriptor instead.
func (SyncType) EnumDescriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{2}
}

type BrokerStatus int32

const (
	BrokerStatus_BROKER_STATUS_UNSPECIFIED BrokerStatus = 0
	BrokerStatus_BROKER_STATUS_HEALTHY     BrokerStatus = 1
	BrokerStatus_BROKER_STATUS_SUSPICIOUS  BrokerStatus = 2
	BrokerStatus_BROKER_STATUS_DOWN        BrokerStatus = 3
)

// Enum value maps for BrokerStatus.
var (
	BrokerStatus_name = map[int32]string{
		0: "BROKER_STATUS_UNSPECIFIED",
		1: "BROKER_STATUS_HEALTHY",
		2: "BROKER_STATUS_SUSPICIOUS",
		3: "BROKER_STATUS_DOWN",
	}
	BrokerStatus_value = map[string]int32{
		"BROKER_STATUS_UNSPECIFIED": 0,
		"BROKER_STATUS_HEALTHY":     1,
		"BROKER_STATUS_SUSPICIOUS":  2,
		"BROKER_STATUS_DOWN":        3,
	}
)

func (x BrokerStatus) Enum() *BrokerStatus {
	p := new(BrokerStatus)
	*p = x
	return p
}

func (x BrokerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrokerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_goulette_proto_enumTypes[3].Descriptor()
}

func (BrokerStatus) Type() protoreflect.EnumType {
	return &file_proto_goulette_proto_enumTypes[3]
}

func (x BrokerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrokerStatus.Descriptor instead.
func (BrokerStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{3}
}

type TopicRole int32

const (
	TopicRole_TOPIC_ROLE_UNSPECIFIED TopicRole = 0
	TopicRole_TOPIC_ROLE_LEADER      TopicRole = 1
	TopicRole_TOPIC_ROLE_FOLLOWER    TopicRole = 2
)

// Enum value maps for TopicRole.
var (
	TopicRole_name = map[int32]string{
		0: "TOPIC_ROLE_UNSPECIFIED",
		1: "TOPIC_ROLE_LEADER",
		2: "TOPIC_ROLE_FOLLOWER",
	}
	TopicRole_value = map[string]int32{
		"TOPIC_ROLE_UNSPECIFIED": 0,
		"TOPIC_ROLE_LEADER":      1,
		"TOPIC_ROLE_FOLLOWER":    2,
	}
)

func (x TopicRole) Enum() *TopicRole {
	p := new(TopicRole)
	*p = x
	return p
}

func (x TopicRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicRole) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_goulette_proto_enumTypes[4].Descriptor()
}

func (TopicRole) Type() protoreflect.EnumType {
	return &file_proto_goulette_proto_enumTypes[4]
}

func (x TopicRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicRole.Descriptor instead.
func (TopicRole) EnumDescriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{4}
}

type RaftMessageType int32

const (
	RaftMessageType_RAFT_MESSAGE_TYPE_UNSPECIFIED             RaftMessageType = 0
	RaftMessageType_RAFT_MESSAGE_TYPE_REQUEST_VOTE            RaftMessageType = 1
	RaftMessageType_RAFT_MESSAGE_TYPE_REQUEST_VOTE_RESPONSE   RaftMessageType = 2
	RaftMessageType_RAFT_MESSAGE_TYPE_APPEND_ENTRIES          RaftMessageType = 3
	RaftMessageType_RAFT_MESSAGE_TYPE_APPEND_ENTRIES_RESPONSE RaftMessageType = 4
	RaftMessageType_RAFT_MESSAGE_TYPE_COMMAND                 RaftMessageType = 5
	RaftMessageType_RAFT_MESSAGE_TYPE_COMMAND_RESPONSE        RaftMessageType = 6
)

// Enum value maps for RaftMessageType.
var (
	RaftMessageType_name = map[int32]string{
		0: "RAFT_MESSAGE_TYPE_UNSPECIFIED",
		1: "RAFT_MESSAGE_TYPE_REQUEST_VOTE",
		2: "RAFT_MESSAGE_TYPE_REQUEST_VOTE_RESPONSE",
		3: "RAFT_MESSAGE_TYPE_APPEND_ENTRIES",
		4: "RAFT_MESSAGE_TYPE_APPEND_ENTRIES_RESPONSE",
		5: "RAFT_MESSAGE_TYPE_COMMAND",
		6: "RAFT_MESSAGE_TYPE_COMMAND_RESPONSE",
	}
	RaftMessageType_value = map[string]int32{
		"RAFT_MESSAGE_TYPE_UNSPECIFIED":             0,
		"RAFT_MESSAGE_TYPE_REQUEST_VOTE":            1,
		"RAFT_MESSAGE_TYPE_REQUEST_VOTE_RESPONSE":   2,
		"RAFT_MESSAGE_TYPE_APPEND_ENTRIES":          3,
		"RAFT_MESSAGE_TYPE_APPEND_ENTRIES_RESPONSE": 4,
		"RAFT_MESSAGE_TYPE_COMMAND":                 5,
		"RAFT_MESSAGE_TYPE_COMMAND_RESPONSE":        6,
	}
)

func (x RaftMessageType) Enum() *RaftMessageType {
	p := new(RaftMessageType)
	*p = x
	return p
}

func (x RaftMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaftMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_goulette_proto_enumTypes[5].Descriptor()
}

func (RaftMessageType) Type() protoreflect.EnumType {
	return &file_proto_goulette_proto_enumTypes[5]
}

func (x RaftMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RaftMessageType.Descriptor instead.
func (RaftMessageType) EnumDescriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{5}
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Represents seconds of UTC time since Unix epoch
	// 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
	// 9999-12-31T23:59:59Z inclusive.
	Seconds int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Non-negative fractions of a second at nanosecond resolution. Negative
	// second values with fractions must still have non-negative nanos values
	// that count forward in time. Must be from 0 to 999,999,999
	// inclusive.
	Nanos int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	mi := &file_proto_goulette_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{0}
}

func (x *Timestamp) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timestamp) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

// 消息请求
type MessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic     string      `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Payload   []byte      `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	MessageId uint64      `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Timestamp *Timestamp  `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type      MessageType `protobuf:"varint,5,opt,name=type,proto3,enum=goulette.MessageType" json:"type,omitempty"`
}

func (x *MessageRequest) Reset() {
	*x = MessageRequest{}
	mi := &file_proto_goulette_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRequest) ProtoMessage() {}

func (x *MessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRequest.ProtoReflect.Descriptor instead.
func (*MessageRequest) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{1}
}

func (x *MessageRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MessageRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *MessageRequest) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *MessageRequest) GetTimestamp() *Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MessageRequest) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_MESSAGE_TYPE_UNSPECIFIED
}

// 消息响应
type MessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId    uint64         `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Status       ResponseStatus `protobuf:"varint,2,opt,name=status,proto3,enum=goulette.ResponseStatus" json:"status,omitempty"`
	ErrorMessage string         `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *MessageResponse) Reset() {
	*x = MessageResponse{}
	mi := &file_proto_goulette_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageResponse) ProtoMessage() {}

func (x *MessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageResponse.ProtoReflect.Descriptor instead.
func (*MessageResponse) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{2}
}

func (x *MessageResponse) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *MessageResponse) GetStatus() ResponseStatus {
	if x != nil {
		return x.Status
	}
	return ResponseStatus_RESPONSE_STATUS_UNSPECIFIED
}

func (x *MessageResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// 拉取请求
type PullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic         string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Offset        uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	BatchSize     uint32 `protobuf:"varint,3,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	ConsumerGroup string `protobuf:"bytes,4,opt,name=consumer_group,json=consumerGroup,proto3" json:"consumer_group,omitempty"`
}

func (x *PullRequest) Reset() {
	*x = PullRequest{}
	mi := &file_proto_goulette_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequest) ProtoMessage() {}

func (x *PullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequest.ProtoReflect.Descriptor instead.
func (*PullRequest) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{3}
}

func (x *PullRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PullRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PullRequest) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *PullRequest) GetConsumerGroup() string {
	if x != nil {
		return x.ConsumerGroup
	}
	return ""
}

// 消息
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId uint64      `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Topic     string      `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Payload   []byte      `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Offset    uint64      `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Timestamp *Timestamp  `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type      MessageType `protobuf:"varint,6,opt,name=type,proto3,enum=goulette.MessageType" json:"type,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_proto_goulette_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{4}
}

func (x *Message) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Message) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Message) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Message) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Message) GetTimestamp() *Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Message) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_MESSAGE_TYPE_UNSPECIFIED
}

// Fragment分片
type FragmentChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic      string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	FragmentId uint64 `protobuf:"varint,2,opt,name=fragment_id,json=fragmentId,proto3" json:"fragment_id,omitempty"`
	ChunkIndex uint32 `protobuf:"varint,3,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	Data       []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	IsLast     bool   `protobuf:"varint,5,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
	Checksum   []byte `protobuf:"bytes,6,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *FragmentChunk) Reset() {
	*x = FragmentChunk{}
	mi := &file_proto_goulette_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FragmentChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentChunk) ProtoMessage() {}

func (x *FragmentChunk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentChunk.ProtoReflect.Descriptor instead.
func (*FragmentChunk) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{5}
}

func (x *FragmentChunk) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *FragmentChunk) GetFragmentId() uint64 {
	if x != nil {
		return x.FragmentId
	}
	return 0
}

func (x *FragmentChunk) GetChunkIndex() uint32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *FragmentChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FragmentChunk) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *FragmentChunk) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

// 复制响应
type ReplicateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ReplicateResponse) Reset() {
	*x = ReplicateResponse{}
	mi := &file_proto_goulette_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateResponse) ProtoMessage() {}

func (x *ReplicateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateResponse.ProtoReflect.Descriptor instead.
func (*ReplicateResponse) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{6}
}

func (x *ReplicateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReplicateResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// 同步请求
type SyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic    string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Offset   uint64   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Data     []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	SyncType SyncType `protobuf:"varint,4,opt,name=sync_type,json=syncType,proto3,enum=goulette.SyncType" json:"sync_type,omitempty"`
}

func (x *SyncRequest) Reset() {
	*x = SyncRequest{}
	mi := &file_proto_goulette_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRequest) ProtoMessage() {}

func (x *SyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRequest.ProtoReflect.Descriptor instead.
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{7}
}

func (x *SyncRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SyncRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SyncRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SyncRequest) GetSyncType() SyncType {
	if x != nil {
		return x.SyncType
	}
	return SyncType_SYNC_TYPE_UNSPECIFIED
}

// 同步响应
type SyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Offset       uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *SyncResponse) Reset() {
	*x = SyncResponse{}
	mi := &file_proto_goulette_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncResponse) ProtoMessage() {}

func (x *SyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncResponse.ProtoReflect.Descriptor instead.
func (*SyncResponse) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{8}
}

func (x *SyncResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SyncResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SyncResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// 心跳请求
type KeepAliveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerId string       `protobuf:"bytes,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	Address  string       `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Status   BrokerStatus `protobuf:"varint,3,opt,name=status,proto3,enum=goulette.BrokerStatus" json:"status,omitempty"`
}

func (x *KeepAliveRequest) Reset() {
	*x = KeepAliveRequest{}
	mi := &file_proto_goulette_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeepAliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAliveRequest) ProtoMessage() {}

func (x *KeepAliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAliveRequest.ProtoReflect.Descriptor instead.
func (*KeepAliveRequest) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{9}
}

func (x *KeepAliveRequest) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *KeepAliveRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *KeepAliveRequest) GetStatus() BrokerStatus {
	if x != nil {
		return x.Status
	}
	return BrokerStatus_BROKER_STATUS_UNSPECIFIED
}

// 心跳响应
type KeepAliveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *KeepAliveResponse) Reset() {
	*x = KeepAliveResponse{}
	mi := &file_proto_goulette_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeepAliveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAliveResponse) ProtoMessage() {}

func (x *KeepAliveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAliveResponse.ProtoReflect.Descriptor instead.
func (*KeepAliveResponse) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{10}
}

func (x *KeepAliveResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *KeepAliveResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// 获取Topic Leader请求
type GetTopicLeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic              string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	ReplicaCount       uint32   `protobuf:"varint,2,opt,name=replica_count,json=replicaCount,proto3" json:"replica_count,omitempty"`
	UnreachableBrokers []string `protobuf:"bytes,3,rep,name=unreachable_brokers,json=unreachableBrokers,proto3" json:"unreachable_brokers,omitempty"` // 无法连接的broker列表
}

func (x *GetTopicLeaderRequest) Reset() {
	*x = GetTopicLeaderRequest{}
	mi := &file_proto_goulette_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopicLeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopicLeaderRequest) ProtoMessage() {}

func (x *GetTopicLeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopicLeaderRequest.ProtoReflect.Descriptor instead.
func (*GetTopicLeaderRequest) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{11}
}

func (x *GetTopicLeaderRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *GetTopicLeaderRequest) GetReplicaCount() uint32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

func (x *GetTopicLeaderRequest) GetUnreachableBrokers() []string {
	if x != nil {
		return x.UnreachableBrokers
	}
	return nil
}

// 获取Topic Leader响应
type GetTopicLeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leader       *BrokerInfo `protobuf:"bytes,1,opt,name=leader,proto3" json:"leader,omitempty"`
	ErrorMessage string      `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *GetTopicLeaderResponse) Reset() {
	*x = GetTopicLeaderResponse{}
	mi := &file_proto_goulette_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopicLeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopicLeaderResponse) ProtoMessage() {}

func (x *GetTopicLeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopicLeaderResponse.ProtoReflect.Descriptor instead.
func (*GetTopicLeaderResponse) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{12}
}

func (x *GetTopicLeaderResponse) GetLeader() *BrokerInfo {
	if x != nil {
		return x.Leader
	}
	return nil
}

func (x *GetTopicLeaderResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// 注册Broker请求
type RegisterBrokerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerId string   `protobuf:"bytes,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	Address  string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Topics   []string `protobuf:"bytes,3,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *RegisterBrokerRequest) Reset() {
	*x = RegisterBrokerRequest{}
	mi := &file_proto_goulette_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterBrokerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterBrokerRequest) ProtoMessage() {}

func (x *RegisterBrokerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterBrokerRequest.ProtoReflect.Descriptor instead.
func (*RegisterBrokerRequest) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{13}
}

func (x *RegisterBrokerRequest) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *RegisterBrokerRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RegisterBrokerRequest) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

// 注册Broker响应
type RegisterBrokerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *RegisterBrokerResponse) Reset() {
	*x = RegisterBrokerResponse{}
	mi := &file_proto_goulette_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterBrokerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterBrokerResponse) ProtoMessage() {}

func (x *RegisterBrokerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterBrokerResponse.ProtoReflect.Descriptor instead.
func (*RegisterBrokerResponse) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{14}
}

func (x *RegisterBrokerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterBrokerResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// 下线Broker请求
type UnregisterBrokerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerId string `protobuf:"bytes,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
}

func (x *UnregisterBrokerRequest) Reset() {
	*x = UnregisterBrokerRequest{}
	mi := &file_proto_goulette_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnregisterBrokerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterBrokerRequest) ProtoMessage() {}

func (x *UnregisterBrokerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterBrokerRequest.ProtoReflect.Descriptor instead.
func (*UnregisterBrokerRequest) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{15}
}

func (x *UnregisterBrokerRequest) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

// 下线Broker响应
type UnregisterBrokerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *UnregisterBrokerResponse) Reset() {
	*x = UnregisterBrokerResponse{}
	mi := &file_proto_goulette_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnregisterBrokerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterBrokerResponse) ProtoMessage() {}

func (x *UnregisterBrokerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterBrokerResponse.ProtoReflect.Descriptor instead.
func (*UnregisterBrokerResponse) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{16}
}

func (x *UnregisterBrokerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UnregisterBrokerResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// 移除Topic请求
type RemoveTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic  string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"` // 移除原因
}

func (x *RemoveTopicRequest) Reset() {
	*x = RemoveTopicRequest{}
	mi := &file_proto_goulette_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTopicRequest) ProtoMessage() {}

func (x *RemoveTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTopicRequest.ProtoReflect.Descriptor instead.
func (*RemoveTopicRequest) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{17}
}

func (x *RemoveTopicRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *RemoveTopicRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// 移除Topic响应
type RemoveTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *RemoveTopicResponse) Reset() {
	*x = RemoveTopicResponse{}
	mi := &file_proto_goulette_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTopicResponse) ProtoMessage() {}

func (x *RemoveTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTopicResponse.ProtoReflect.Descriptor instead.
func (*RemoveTopicResponse) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveTopicResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemoveTopicResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// 设置Topic角色请求
type SetTopicRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic         string    `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Role          TopicRole `protobuf:"varint,2,opt,name=role,proto3,enum=goulette.TopicRole" json:"role,omitempty"`
	Followers     []string  `protobuf:"bytes,3,rep,name=followers,proto3" json:"followers,omitempty"`                              // follower broker地址列表
	LeaderAddress string    `protobuf:"bytes,4,opt,name=leader_address,json=leaderAddress,proto3" json:"leader_address,omitempty"` // leader broker地址
}

func (x *SetTopicRoleRequest) Reset() {
	*x = SetTopicRoleRequest{}
	mi := &file_proto_goulette_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTopicRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTopicRoleRequest) ProtoMessage() {}

func (x *SetTopicRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTopicRoleRequest.ProtoReflect.Descriptor instead.
func (*SetTopicRoleRequest) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{19}
}

func (x *SetTopicRoleRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SetTopicRoleRequest) GetRole() TopicRole {
	if x != nil {
		return x.Role
	}
	return TopicRole_TOPIC_ROLE_UNSPECIFIED
}

func (x *SetTopicRoleRequest) GetFollowers() []string {
	if x != nil {
		return x.Followers
	}
	return nil
}

func (x *SetTopicRoleRequest) GetLeaderAddress() string {
	if x != nil {
		return x.LeaderAddress
	}
	return ""
}

// 设置Topic角色响应
type SetTopicRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *SetTopicRoleResponse) Reset() {
	*x = SetTopicRoleResponse{}
	mi := &file_proto_goulette_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTopicRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTopicRoleResponse) ProtoMessage() {}

func (x *SetTopicRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTopicRoleResponse.ProtoReflect.Descriptor instead.
func (*SetTopicRoleResponse) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{20}
}

func (x *SetTopicRoleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SetTopicRoleResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Raft请求
type RaftRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic       string          `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	FromPeerId  string          `protobuf:"bytes,2,opt,name=from_peer_id,json=fromPeerId,proto3" json:"from_peer_id,omitempty"`
	MessageType RaftMessageType `protobuf:"varint,3,opt,name=message_type,json=messageType,proto3,enum=goulette.RaftMessageType" json:"message_type,omitempty"`
	Payload     []byte          `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"` // 序列化的Raft消息
}

func (x *RaftRequest) Reset() {
	*x = RaftRequest{}
	mi := &file_proto_goulette_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftRequest) ProtoMessage() {}

func (x *RaftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftRequest.ProtoReflect.Descriptor instead.
func (*RaftRequest) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{21}
}

func (x *RaftRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *RaftRequest) GetFromPeerId() string {
	if x != nil {
		return x.FromPeerId
	}
	return ""
}

func (x *RaftRequest) GetMessageType() RaftMessageType {
	if x != nil {
		return x.MessageType
	}
	return RaftMessageType_RAFT_MESSAGE_TYPE_UNSPECIFIED
}

func (x *RaftRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Raft响应
type RaftResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic        string          `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	ToPeerId     string          `protobuf:"bytes,2,opt,name=to_peer_id,json=toPeerId,proto3" json:"to_peer_id,omitempty"`
	MessageType  RaftMessageType `protobuf:"varint,3,opt,name=message_type,json=messageType,proto3,enum=goulette.RaftMessageType" json:"message_type,omitempty"`
	Payload      []byte          `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"` // 序列化的Raft响应
	Success      bool            `protobuf:"varint,5,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string          `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *RaftResponse) Reset() {
	*x = RaftResponse{}
	mi := &file_proto_goulette_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftResponse) ProtoMessage() {}

func (x *RaftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftResponse.ProtoReflect.Descriptor instead.
func (*RaftResponse) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{22}
}

func (x *RaftResponse) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *RaftResponse) GetToPeerId() string {
	if x != nil {
		return x.ToPeerId
	}
	return ""
}

func (x *RaftResponse) GetMessageType() RaftMessageType {
	if x != nil {
		return x.MessageType
	}
	return RaftMessageType_RAFT_MESSAGE_TYPE_UNSPECIFIED
}

func (x *RaftResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RaftResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RaftResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Raft消息（用于流式传输）
type RaftMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic       string          `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	FromPeerId  string          `protobuf:"bytes,2,opt,name=from_peer_id,json=fromPeerId,proto3" json:"from_peer_id,omitempty"`
	ToPeerId    string          `protobuf:"bytes,3,opt,name=to_peer_id,json=toPeerId,proto3" json:"to_peer_id,omitempty"`
	MessageType RaftMessageType `protobuf:"varint,4,opt,name=message_type,json=messageType,proto3,enum=goulette.RaftMessageType" json:"message_type,omitempty"`
	Payload     []byte          `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"` // 序列化的Raft消息
	Term        int64           `protobuf:"varint,6,opt,name=term,proto3" json:"term,omitempty"`
	Timestamp   int64           `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *RaftMessage) Reset() {
	*x = RaftMessage{}
	mi := &file_proto_goulette_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftMessage) ProtoMessage() {}

func (x *RaftMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftMessage.ProtoReflect.Descriptor instead.
func (*RaftMessage) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{23}
}

func (x *RaftMessage) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *RaftMessage) GetFromPeerId() string {
	if x != nil {
		return x.FromPeerId
	}
	return ""
}

func (x *RaftMessage) GetToPeerId() string {
	if x != nil {
		return x.ToPeerId
	}
	return ""
}

func (x *RaftMessage) GetMessageType() RaftMessageType {
	if x != nil {
		return x.MessageType
	}
	return RaftMessageType_RAFT_MESSAGE_TYPE_UNSPECIFIED
}

func (x *RaftMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RaftMessage) GetTerm() int64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RaftMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 获取Broker在指定Topic中的角色请求
type GetBrokerTopicRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerId string `protobuf:"bytes,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	Topic    string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *GetBrokerTopicRoleRequest) Reset() {
	*x = GetBrokerTopicRoleRequest{}
	mi := &file_proto_goulette_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBrokerTopicRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrokerTopicRoleRequest) ProtoMessage() {}

func (x *GetBrokerTopicRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrokerTopicRoleRequest.ProtoReflect.Descriptor instead.
func (*GetBrokerTopicRoleRequest) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{24}
}

func (x *GetBrokerTopicRoleRequest) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *GetBrokerTopicRoleRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

// 获取Broker在指定Topic中的角色响应
type GetBrokerTopicRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerId     string    `protobuf:"bytes,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	Topic        string    `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Role         TopicRole `protobuf:"varint,3,opt,name=role,proto3,enum=goulette.TopicRole" json:"role,omitempty"`
	Success      bool      `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string    `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *GetBrokerTopicRoleResponse) Reset() {
	*x = GetBrokerTopicRoleResponse{}
	mi := &file_proto_goulette_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBrokerTopicRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrokerTopicRoleResponse) ProtoMessage() {}

func (x *GetBrokerTopicRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrokerTopicRoleResponse.ProtoReflect.Descriptor instead.
func (*GetBrokerTopicRoleResponse) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{25}
}

func (x *GetBrokerTopicRoleResponse) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *GetBrokerTopicRoleResponse) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *GetBrokerTopicRoleResponse) GetRole() TopicRole {
	if x != nil {
		return x.Role
	}
	return TopicRole_TOPIC_ROLE_UNSPECIFIED
}

func (x *GetBrokerTopicRoleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetBrokerTopicRoleResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Broker信息
type BrokerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerId      string       `protobuf:"bytes,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	Address       string       `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Status        BrokerStatus `protobuf:"varint,3,opt,name=status,proto3,enum=goulette.BrokerStatus" json:"status,omitempty"`
	Topics        []string     `protobuf:"bytes,4,rep,name=topics,proto3" json:"topics,omitempty"`
	LastHeartbeat *Timestamp   `protobuf:"bytes,5,opt,name=last_heartbeat,json=lastHeartbeat,proto3" json:"last_heartbeat,omitempty"`
}

func (x *BrokerInfo) Reset() {
	*x = BrokerInfo{}
	mi := &file_proto_goulette_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BrokerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerInfo) ProtoMessage() {}

func (x *BrokerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerInfo.ProtoReflect.Descriptor instead.
func (*BrokerInfo) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{26}
}

func (x *BrokerInfo) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *BrokerInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BrokerInfo) GetStatus() BrokerStatus {
	if x != nil {
		return x.Status
	}
	return BrokerStatus_BROKER_STATUS_UNSPECIFIED
}

func (x *BrokerInfo) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *BrokerInfo) GetLastHeartbeat() *Timestamp {
	if x != nil {
		return x.LastHeartbeat
	}
	return nil
}

// 请求复制Fragment的请求
type RequestFragmentReplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic               string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	TargetBrokerId      string `protobuf:"bytes,2,opt,name=target_broker_id,json=targetBrokerId,proto3" json:"target_broker_id,omitempty"`
	TargetBrokerAddress string `protobuf:"bytes,3,opt,name=target_broker_address,json=targetBrokerAddress,proto3" json:"target_broker_address,omitempty"`
	ReplicaIndex        uint64 `protobuf:"varint,4,opt,name=replica_index,json=replicaIndex,proto3" json:"replica_index,omitempty"`
	TotalReplicas       uint64 `protobuf:"varint,5,opt,name=total_replicas,json=totalReplicas,proto3" json:"total_replicas,omitempty"`
}

func (x *RequestFragmentReplicationRequest) Reset() {
	*x = RequestFragmentReplicationRequest{}
	mi := &file_proto_goulette_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestFragmentReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestFragmentReplicationRequest) ProtoMessage() {}

func (x *RequestFragmentReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestFragmentReplicationRequest.ProtoReflect.Descriptor instead.
func (*RequestFragmentReplicationRequest) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{27}
}

func (x *RequestFragmentReplicationRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *RequestFragmentReplicationRequest) GetTargetBrokerId() string {
	if x != nil {
		return x.TargetBrokerId
	}
	return ""
}

func (x *RequestFragmentReplicationRequest) GetTargetBrokerAddress() string {
	if x != nil {
		return x.TargetBrokerAddress
	}
	return ""
}

func (x *RequestFragmentReplicationRequest) GetReplicaIndex() uint64 {
	if x != nil {
		return x.ReplicaIndex
	}
	return 0
}

func (x *RequestFragmentReplicationRequest) GetTotalReplicas() uint64 {
	if x != nil {
		return x.TotalReplicas
	}
	return 0
}

// 请求复制Fragment的响应
type RequestFragmentReplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *RequestFragmentReplicationResponse) Reset() {
	*x = RequestFragmentReplicationResponse{}
	mi := &file_proto_goulette_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestFragmentReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestFragmentReplicationResponse) ProtoMessage() {}

func (x *RequestFragmentReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_goulette_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestFragmentReplicationResponse.ProtoReflect.Descriptor instead.
func (*RequestFragmentReplicationResponse) Descriptor() ([]byte, []int) {
	return file_proto_goulette_proto_rawDescGZIP(), []int{28}
}

func (x *RequestFragmentReplicationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RequestFragmentReplicationResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_proto_goulette_proto protoreflect.FileDescriptor

var file_proto_goulette_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x22, 0x3b, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x22, 0xbd, 0x01,
	0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x87, 0x01,
	0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0b, 0x50, 0x75, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xce, 0x01, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x31,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb0, 0x01, 0x0a,
	0x0d, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22,
	0x52, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x79,
	0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0x65, 0x0a, 0x0c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x79, 0x0a,
	0x10, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x0a, 0x11, 0x4b, 0x65, 0x65, 0x70,
	0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x83, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x13, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x73, 0x22, 0x6b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x66, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0x57, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x36, 0x0a, 0x17, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x18, 0x55, 0x6e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x42, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x99, 0x01,
	0x0a, 0x13, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x75, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x55, 0x0a, 0x14, 0x53, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x52, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0xd9, 0x01, 0x0a, 0x0c, 0x52, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x50,
	0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xed, 0x01, 0x0a,
	0x0b, 0x52, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x50, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x4e, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0xb7, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x27,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67,
	0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x0a, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67,
	0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x22, 0xe3, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x63, 0x0a, 0x22, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x79, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x41, 0x59, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x84, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x03, 0x2a, 0x6a, 0x0a,
	0x08, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x59, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x03, 0x2a, 0x7e, 0x0a, 0x0c, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x52, 0x4f,
	0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x52, 0x4f, 0x4b,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x59, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x2a, 0x57, 0x0a, 0x09, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x4f, 0x50,
	0x49, 0x43, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52,
	0x10, 0x02, 0x2a, 0xa1, 0x02, 0x0a, 0x0f, 0x52, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x41, 0x46,
	0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x12, 0x2b, 0x0a,
	0x27, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x41,
	0x46, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x49, 0x45, 0x53, 0x10, 0x03,
	0x12, 0x2d, 0x0a, 0x29, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x54,
	0x52, 0x49, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x04, 0x12,
	0x1d, 0x0a, 0x19, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x26,
	0x0a, 0x22, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0x06, 0x32, 0xdd, 0x05, 0x0a, 0x0d, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x39, 0x0a, 0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x15, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x11, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x17, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x75, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x4a, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e,
	0x53, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x61, 0x66,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e, 0x67, 0x6f, 0x75,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x15, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x66,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x5f, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x23, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a,
	0x1a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x67, 0x6f,
	0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xdc, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x4b, 0x65,
	0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x4b,
	0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74,
	0x74, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x55, 0x6e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x21,
	0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x67, 0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x6c, 0x6b, 0x61, 0x79, 0x61, 0x2f, 0x67, 0x6f, 0x75, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_goulette_proto_rawDescOnce sync.Once
	file_proto_goulette_proto_rawDescData = file_proto_goulette_proto_rawDesc
)

func file_proto_goulette_proto_rawDescGZIP() []byte {
	file_proto_goulette_proto_rawDescOnce.Do(func() {
		file_proto_goulette_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_goulette_proto_rawDescData)
	})
	return file_proto_goulette_proto_rawDescData
}

var file_proto_goulette_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_proto_goulette_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_proto_goulette_proto_goTypes = []any{
	(MessageType)(0),                           // 0: goulette.MessageType
	(ResponseStatus)(0),                        // 1: goulette.ResponseStatus
	(SyncType)(0),                              // 2: goulette.SyncType
	(BrokerStatus)(0),                          // 3: goulette.BrokerStatus
	(TopicRole)(0),                             // 4: goulette.TopicRole
	(RaftMessageType)(0),                       // 5: goulette.RaftMessageType
	(*Timestamp)(nil),                          // 6: goulette.Timestamp
	(*MessageRequest)(nil),                     // 7: goulette.MessageRequest
	(*MessageResponse)(nil),                    // 8: goulette.MessageResponse
	(*PullRequest)(nil),                        // 9: goulette.PullRequest
	(*Message)(nil),                            // 10: goulette.Message
	(*FragmentChunk)(nil),                      // 11: goulette.FragmentChunk
	(*ReplicateResponse)(nil),                  // 12: goulette.ReplicateResponse
	(*SyncRequest)(nil),                        // 13: goulette.SyncRequest
	(*SyncResponse)(nil),                       // 14: goulette.SyncResponse
	(*KeepAliveRequest)(nil),                   // 15: goulette.KeepAliveRequest
	(*KeepAliveResponse)(nil),                  // 16: goulette.KeepAliveResponse
	(*GetTopicLeaderRequest)(nil),              // 17: goulette.GetTopicLeaderRequest
	(*GetTopicLeaderResponse)(nil),             // 18: goulette.GetTopicLeaderResponse
	(*RegisterBrokerRequest)(nil),              // 19: goulette.RegisterBrokerRequest
	(*RegisterBrokerResponse)(nil),             // 20: goulette.RegisterBrokerResponse
	(*UnregisterBrokerRequest)(nil),            // 21: goulette.UnregisterBrokerRequest
	(*UnregisterBrokerResponse)(nil),           // 22: goulette.UnregisterBrokerResponse
	(*RemoveTopicRequest)(nil),                 // 23: goulette.RemoveTopicRequest
	(*RemoveTopicResponse)(nil),                // 24: goulette.RemoveTopicResponse
	(*SetTopicRoleRequest)(nil),                // 25: goulette.SetTopicRoleRequest
	(*SetTopicRoleResponse)(nil),               // 26: goulette.SetTopicRoleResponse
	(*RaftRequest)(nil),                        // 27: goulette.RaftRequest
	(*RaftResponse)(nil),                       // 28: goulette.RaftResponse
	(*RaftMessage)(nil),                        // 29: goulette.RaftMessage
	(*GetBrokerTopicRoleRequest)(nil),          // 30: goulette.GetBrokerTopicRoleRequest
	(*GetBrokerTopicRoleResponse)(nil),         // 31: goulette.GetBrokerTopicRoleResponse
	(*BrokerInfo)(nil),                         // 32: goulette.BrokerInfo
	(*RequestFragmentReplicationRequest)(nil),  // 33: goulette.RequestFragmentReplicationRequest
	(*RequestFragmentReplicationResponse)(nil), // 34: goulette.RequestFragmentReplicationResponse
}
var file_proto_goulette_proto_depIdxs = []int32{
	6,  // 0: goulette.MessageRequest.timestamp:type_name -> goulette.Timestamp
	0,  // 1: goulette.MessageRequest.type:type_name -> goulette.MessageType
	1,  // 2: goulette.MessageResponse.status:type_name -> goulette.ResponseStatus
	6,  // 3: goulette.Message.timestamp:type_name -> goulette.Timestamp
	0,  // 4: goulette.Message.type:type_name -> goulette.MessageType
	2,  // 5: goulette.SyncRequest.sync_type:type_name -> goulette.SyncType
	3,  // 6: goulette.KeepAliveRequest.status:type_name -> goulette.BrokerStatus
	32, // 7: goulette.GetTopicLeaderResponse.leader:type_name -> goulette.BrokerInfo
	4,  // 8: goulette.SetTopicRoleRequest.role:type_name -> goulette.TopicRole
	5,  // 9: goulette.RaftRequest.message_type:type_name -> goulette.RaftMessageType
	5,  // 10: goulette.RaftResponse.message_type:type_name -> goulette.RaftMessageType
	5,  // 11: goulette.RaftMessage.message_type:type_name -> goulette.RaftMessageType
	4,  // 12: goulette.GetBrokerTopicRoleResponse.role:type_name -> goulette.TopicRole
	3,  // 13: goulette.BrokerInfo.status:type_name -> goulette.BrokerStatus
	6,  // 14: goulette.BrokerInfo.last_heartbeat:type_name -> goulette.Timestamp
	7,  // 15: goulette.BrokerService.SendMessage:input_type -> goulette.MessageRequest
	9,  // 16: goulette.BrokerService.PullMessage:input_type -> goulette.PullRequest
	11, // 17: goulette.BrokerService.ReplicateFragment:input_type -> goulette.FragmentChunk
	23, // 18: goulette.BrokerService.RemoveTopic:input_type -> goulette.RemoveTopicRequest
	25, // 19: goulette.BrokerService.SetTopicRole:input_type -> goulette.SetTopicRoleRequest
	27, // 20: goulette.BrokerService.HandleRaftRequest:input_type -> goulette.RaftRequest
	29, // 21: goulette.BrokerService.SendRaftMessage:input_type -> goulette.RaftMessage
	30, // 22: goulette.BrokerService.GetBrokerTopicRole:input_type -> goulette.GetBrokerTopicRoleRequest
	33, // 23: goulette.BrokerService.RequestFragmentReplication:input_type -> goulette.RequestFragmentReplicationRequest
	15, // 24: goulette.SentinelService.KeepAlive:input_type -> goulette.KeepAliveRequest
	17, // 25: goulette.SentinelService.GetTopicLeader:input_type -> goulette.GetTopicLeaderRequest
	19, // 26: goulette.SentinelService.RegisterBroker:input_type -> goulette.RegisterBrokerRequest
	21, // 27: goulette.SentinelService.UnregisterBroker:input_type -> goulette.UnregisterBrokerRequest
	8,  // 28: goulette.BrokerService.SendMessage:output_type -> goulette.MessageResponse
	10, // 29: goulette.BrokerService.PullMessage:output_type -> goulette.Message
	12, // 30: goulette.BrokerService.ReplicateFragment:output_type -> goulette.ReplicateResponse
	24, // 31: goulette.BrokerService.RemoveTopic:output_type -> goulette.RemoveTopicResponse
	26, // 32: goulette.BrokerService.SetTopicRole:output_type -> goulette.SetTopicRoleResponse
	28, // 33: goulette.BrokerService.HandleRaftRequest:output_type -> goulette.RaftResponse
	29, // 34: goulette.BrokerService.SendRaftMessage:output_type -> goulette.RaftMessage
	31, // 35: goulette.BrokerService.GetBrokerTopicRole:output_type -> goulette.GetBrokerTopicRoleResponse
	34, // 36: goulette.BrokerService.RequestFragmentReplication:output_type -> goulette.RequestFragmentReplicationResponse
	16, // 37: goulette.SentinelService.KeepAlive:output_type -> goulette.KeepAliveResponse
	18, // 38: goulette.SentinelService.GetTopicLeader:output_type -> goulette.GetTopicLeaderResponse
	20, // 39: goulette.SentinelService.RegisterBroker:output_type -> goulette.RegisterBrokerResponse
	22, // 40: goulette.SentinelService.UnregisterBroker:output_type -> goulette.UnregisterBrokerResponse
	28, // [28:41] is the sub-list for method output_type
	15, // [15:28] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_proto_goulette_proto_init() }
func file_proto_goulette_proto_init() {
	if File_proto_goulette_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_goulette_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_goulette_proto_goTypes,
		DependencyIndexes: file_proto_goulette_proto_depIdxs,
		EnumInfos:         file_proto_goulette_proto_enumTypes,
		MessageInfos:      file_proto_goulette_proto_msgTypes,
	}.Build()
	File_proto_goulette_proto = out.File
	file_proto_goulette_proto_rawDesc = nil
	file_proto_goulette_proto_goTypes = nil
	file_proto_goulette_proto_depIdxs = nil
}
