// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: proto/goulette.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BrokerService_SendMessage_FullMethodName                = "/goulette.BrokerService/SendMessage"
	BrokerService_PullMessage_FullMethodName                = "/goulette.BrokerService/PullMessage"
	BrokerService_ReplicateFragment_FullMethodName          = "/goulette.BrokerService/ReplicateFragment"
	BrokerService_RemoveTopic_FullMethodName                = "/goulette.BrokerService/RemoveTopic"
	BrokerService_SetTopicRole_FullMethodName               = "/goulette.BrokerService/SetTopicRole"
	BrokerService_HandleRaftRequest_FullMethodName          = "/goulette.BrokerService/HandleRaftRequest"
	BrokerService_SendRaftMessage_FullMethodName            = "/goulette.BrokerService/SendRaftMessage"
	BrokerService_GetBrokerTopicRole_FullMethodName         = "/goulette.BrokerService/GetBrokerTopicRole"
	BrokerService_RequestFragmentReplication_FullMethodName = "/goulette.BrokerService/RequestFragmentReplication"
)

// BrokerServiceClient is the client API for BrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Broker服务定义
type BrokerServiceClient interface {
	// 发送消息（双向流）
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MessageRequest, MessageResponse], error)
	// 拉取消息（流式）
	PullMessage(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error)
	// 复制Fragment文件
	ReplicateFragment(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FragmentChunk, ReplicateResponse], error)
	// 移除Topic
	RemoveTopic(ctx context.Context, in *RemoveTopicRequest, opts ...grpc.CallOption) (*RemoveTopicResponse, error)
	// 设置Topic角色（Leader/Follower）
	SetTopicRole(ctx context.Context, in *SetTopicRoleRequest, opts ...grpc.CallOption) (*SetTopicRoleResponse, error)
	// Raft相关RPC调用
	HandleRaftRequest(ctx context.Context, in *RaftRequest, opts ...grpc.CallOption) (*RaftResponse, error)
	SendRaftMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RaftMessage, RaftMessage], error)
	// 获取Broker在指定Topic中的角色
	GetBrokerTopicRole(ctx context.Context, in *GetBrokerTopicRoleRequest, opts ...grpc.CallOption) (*GetBrokerTopicRoleResponse, error)
	// 请求复制Fragment到目标Broker
	RequestFragmentReplication(ctx context.Context, in *RequestFragmentReplicationRequest, opts ...grpc.CallOption) (*RequestFragmentReplicationResponse, error)
}

type brokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerServiceClient(cc grpc.ClientConnInterface) BrokerServiceClient {
	return &brokerServiceClient{cc}
}

func (c *brokerServiceClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MessageRequest, MessageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BrokerService_ServiceDesc.Streams[0], BrokerService_SendMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MessageRequest, MessageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrokerService_SendMessageClient = grpc.BidiStreamingClient[MessageRequest, MessageResponse]

func (c *brokerServiceClient) PullMessage(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BrokerService_ServiceDesc.Streams[1], BrokerService_PullMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullRequest, Message]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrokerService_PullMessageClient = grpc.ServerStreamingClient[Message]

func (c *brokerServiceClient) ReplicateFragment(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FragmentChunk, ReplicateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BrokerService_ServiceDesc.Streams[2], BrokerService_ReplicateFragment_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FragmentChunk, ReplicateResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrokerService_ReplicateFragmentClient = grpc.ClientStreamingClient[FragmentChunk, ReplicateResponse]

func (c *brokerServiceClient) RemoveTopic(ctx context.Context, in *RemoveTopicRequest, opts ...grpc.CallOption) (*RemoveTopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTopicResponse)
	err := c.cc.Invoke(ctx, BrokerService_RemoveTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) SetTopicRole(ctx context.Context, in *SetTopicRoleRequest, opts ...grpc.CallOption) (*SetTopicRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTopicRoleResponse)
	err := c.cc.Invoke(ctx, BrokerService_SetTopicRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) HandleRaftRequest(ctx context.Context, in *RaftRequest, opts ...grpc.CallOption) (*RaftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RaftResponse)
	err := c.cc.Invoke(ctx, BrokerService_HandleRaftRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) SendRaftMessage(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RaftMessage, RaftMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BrokerService_ServiceDesc.Streams[3], BrokerService_SendRaftMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RaftMessage, RaftMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrokerService_SendRaftMessageClient = grpc.BidiStreamingClient[RaftMessage, RaftMessage]

func (c *brokerServiceClient) GetBrokerTopicRole(ctx context.Context, in *GetBrokerTopicRoleRequest, opts ...grpc.CallOption) (*GetBrokerTopicRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBrokerTopicRoleResponse)
	err := c.cc.Invoke(ctx, BrokerService_GetBrokerTopicRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) RequestFragmentReplication(ctx context.Context, in *RequestFragmentReplicationRequest, opts ...grpc.CallOption) (*RequestFragmentReplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestFragmentReplicationResponse)
	err := c.cc.Invoke(ctx, BrokerService_RequestFragmentReplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServiceServer is the server API for BrokerService service.
// All implementations must embed UnimplementedBrokerServiceServer
// for forward compatibility.
//
// Broker服务定义
type BrokerServiceServer interface {
	// 发送消息（双向流）
	SendMessage(grpc.BidiStreamingServer[MessageRequest, MessageResponse]) error
	// 拉取消息（流式）
	PullMessage(*PullRequest, grpc.ServerStreamingServer[Message]) error
	// 复制Fragment文件
	ReplicateFragment(grpc.ClientStreamingServer[FragmentChunk, ReplicateResponse]) error
	// 移除Topic
	RemoveTopic(context.Context, *RemoveTopicRequest) (*RemoveTopicResponse, error)
	// 设置Topic角色（Leader/Follower）
	SetTopicRole(context.Context, *SetTopicRoleRequest) (*SetTopicRoleResponse, error)
	// Raft相关RPC调用
	HandleRaftRequest(context.Context, *RaftRequest) (*RaftResponse, error)
	SendRaftMessage(grpc.BidiStreamingServer[RaftMessage, RaftMessage]) error
	// 获取Broker在指定Topic中的角色
	GetBrokerTopicRole(context.Context, *GetBrokerTopicRoleRequest) (*GetBrokerTopicRoleResponse, error)
	// 请求复制Fragment到目标Broker
	RequestFragmentReplication(context.Context, *RequestFragmentReplicationRequest) (*RequestFragmentReplicationResponse, error)
	mustEmbedUnimplementedBrokerServiceServer()
}

// UnimplementedBrokerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrokerServiceServer struct{}

func (UnimplementedBrokerServiceServer) SendMessage(grpc.BidiStreamingServer[MessageRequest, MessageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedBrokerServiceServer) PullMessage(*PullRequest, grpc.ServerStreamingServer[Message]) error {
	return status.Errorf(codes.Unimplemented, "method PullMessage not implemented")
}
func (UnimplementedBrokerServiceServer) ReplicateFragment(grpc.ClientStreamingServer[FragmentChunk, ReplicateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReplicateFragment not implemented")
}
func (UnimplementedBrokerServiceServer) RemoveTopic(context.Context, *RemoveTopicRequest) (*RemoveTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTopic not implemented")
}
func (UnimplementedBrokerServiceServer) SetTopicRole(context.Context, *SetTopicRoleRequest) (*SetTopicRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTopicRole not implemented")
}
func (UnimplementedBrokerServiceServer) HandleRaftRequest(context.Context, *RaftRequest) (*RaftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRaftRequest not implemented")
}
func (UnimplementedBrokerServiceServer) SendRaftMessage(grpc.BidiStreamingServer[RaftMessage, RaftMessage]) error {
	return status.Errorf(codes.Unimplemented, "method SendRaftMessage not implemented")
}
func (UnimplementedBrokerServiceServer) GetBrokerTopicRole(context.Context, *GetBrokerTopicRoleRequest) (*GetBrokerTopicRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrokerTopicRole not implemented")
}
func (UnimplementedBrokerServiceServer) RequestFragmentReplication(context.Context, *RequestFragmentReplicationRequest) (*RequestFragmentReplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestFragmentReplication not implemented")
}
func (UnimplementedBrokerServiceServer) mustEmbedUnimplementedBrokerServiceServer() {}
func (UnimplementedBrokerServiceServer) testEmbeddedByValue()                       {}

// UnsafeBrokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServiceServer will
// result in compilation errors.
type UnsafeBrokerServiceServer interface {
	mustEmbedUnimplementedBrokerServiceServer()
}

func RegisterBrokerServiceServer(s grpc.ServiceRegistrar, srv BrokerServiceServer) {
	// If the following call pancis, it indicates UnimplementedBrokerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BrokerService_ServiceDesc, srv)
}

func _BrokerService_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServiceServer).SendMessage(&grpc.GenericServerStream[MessageRequest, MessageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrokerService_SendMessageServer = grpc.BidiStreamingServer[MessageRequest, MessageResponse]

func _BrokerService_PullMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrokerServiceServer).PullMessage(m, &grpc.GenericServerStream[PullRequest, Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrokerService_PullMessageServer = grpc.ServerStreamingServer[Message]

func _BrokerService_ReplicateFragment_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServiceServer).ReplicateFragment(&grpc.GenericServerStream[FragmentChunk, ReplicateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrokerService_ReplicateFragmentServer = grpc.ClientStreamingServer[FragmentChunk, ReplicateResponse]

func _BrokerService_RemoveTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).RemoveTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_RemoveTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).RemoveTopic(ctx, req.(*RemoveTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_SetTopicRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTopicRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).SetTopicRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_SetTopicRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).SetTopicRole(ctx, req.(*SetTopicRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_HandleRaftRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).HandleRaftRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_HandleRaftRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).HandleRaftRequest(ctx, req.(*RaftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_SendRaftMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServiceServer).SendRaftMessage(&grpc.GenericServerStream[RaftMessage, RaftMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrokerService_SendRaftMessageServer = grpc.BidiStreamingServer[RaftMessage, RaftMessage]

func _BrokerService_GetBrokerTopicRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrokerTopicRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).GetBrokerTopicRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_GetBrokerTopicRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).GetBrokerTopicRole(ctx, req.(*GetBrokerTopicRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_RequestFragmentReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFragmentReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).RequestFragmentReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrokerService_RequestFragmentReplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).RequestFragmentReplication(ctx, req.(*RequestFragmentReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrokerService_ServiceDesc is the grpc.ServiceDesc for BrokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goulette.BrokerService",
	HandlerType: (*BrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoveTopic",
			Handler:    _BrokerService_RemoveTopic_Handler,
		},
		{
			MethodName: "SetTopicRole",
			Handler:    _BrokerService_SetTopicRole_Handler,
		},
		{
			MethodName: "HandleRaftRequest",
			Handler:    _BrokerService_HandleRaftRequest_Handler,
		},
		{
			MethodName: "GetBrokerTopicRole",
			Handler:    _BrokerService_GetBrokerTopicRole_Handler,
		},
		{
			MethodName: "RequestFragmentReplication",
			Handler:    _BrokerService_RequestFragmentReplication_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _BrokerService_SendMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PullMessage",
			Handler:       _BrokerService_PullMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReplicateFragment",
			Handler:       _BrokerService_ReplicateFragment_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendRaftMessage",
			Handler:       _BrokerService_SendRaftMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/goulette.proto",
}

const (
	SentinelService_KeepAlive_FullMethodName        = "/goulette.SentinelService/KeepAlive"
	SentinelService_GetTopicLeader_FullMethodName   = "/goulette.SentinelService/GetTopicLeader"
	SentinelService_RegisterBroker_FullMethodName   = "/goulette.SentinelService/RegisterBroker"
	SentinelService_UnregisterBroker_FullMethodName = "/goulette.SentinelService/UnregisterBroker"
)

// SentinelServiceClient is the client API for SentinelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Sentinel服务定义
type SentinelServiceClient interface {
	// Broker心跳维持
	KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error)
	// 查询Topic对应的Leader Broker
	GetTopicLeader(ctx context.Context, in *GetTopicLeaderRequest, opts ...grpc.CallOption) (*GetTopicLeaderResponse, error)
	// 注册新Broker
	RegisterBroker(ctx context.Context, in *RegisterBrokerRequest, opts ...grpc.CallOption) (*RegisterBrokerResponse, error)
	// Broker下线
	UnregisterBroker(ctx context.Context, in *UnregisterBrokerRequest, opts ...grpc.CallOption) (*UnregisterBrokerResponse, error)
}

type sentinelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSentinelServiceClient(cc grpc.ClientConnInterface) SentinelServiceClient {
	return &sentinelServiceClient{cc}
}

func (c *sentinelServiceClient) KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeepAliveResponse)
	err := c.cc.Invoke(ctx, SentinelService_KeepAlive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentinelServiceClient) GetTopicLeader(ctx context.Context, in *GetTopicLeaderRequest, opts ...grpc.CallOption) (*GetTopicLeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopicLeaderResponse)
	err := c.cc.Invoke(ctx, SentinelService_GetTopicLeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentinelServiceClient) RegisterBroker(ctx context.Context, in *RegisterBrokerRequest, opts ...grpc.CallOption) (*RegisterBrokerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterBrokerResponse)
	err := c.cc.Invoke(ctx, SentinelService_RegisterBroker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentinelServiceClient) UnregisterBroker(ctx context.Context, in *UnregisterBrokerRequest, opts ...grpc.CallOption) (*UnregisterBrokerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterBrokerResponse)
	err := c.cc.Invoke(ctx, SentinelService_UnregisterBroker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SentinelServiceServer is the server API for SentinelService service.
// All implementations must embed UnimplementedSentinelServiceServer
// for forward compatibility.
//
// Sentinel服务定义
type SentinelServiceServer interface {
	// Broker心跳维持
	KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveResponse, error)
	// 查询Topic对应的Leader Broker
	GetTopicLeader(context.Context, *GetTopicLeaderRequest) (*GetTopicLeaderResponse, error)
	// 注册新Broker
	RegisterBroker(context.Context, *RegisterBrokerRequest) (*RegisterBrokerResponse, error)
	// Broker下线
	UnregisterBroker(context.Context, *UnregisterBrokerRequest) (*UnregisterBrokerResponse, error)
	mustEmbedUnimplementedSentinelServiceServer()
}

// UnimplementedSentinelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSentinelServiceServer struct{}

func (UnimplementedSentinelServiceServer) KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedSentinelServiceServer) GetTopicLeader(context.Context, *GetTopicLeaderRequest) (*GetTopicLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicLeader not implemented")
}
func (UnimplementedSentinelServiceServer) RegisterBroker(context.Context, *RegisterBrokerRequest) (*RegisterBrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBroker not implemented")
}
func (UnimplementedSentinelServiceServer) UnregisterBroker(context.Context, *UnregisterBrokerRequest) (*UnregisterBrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterBroker not implemented")
}
func (UnimplementedSentinelServiceServer) mustEmbedUnimplementedSentinelServiceServer() {}
func (UnimplementedSentinelServiceServer) testEmbeddedByValue()                         {}

// UnsafeSentinelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SentinelServiceServer will
// result in compilation errors.
type UnsafeSentinelServiceServer interface {
	mustEmbedUnimplementedSentinelServiceServer()
}

func RegisterSentinelServiceServer(s grpc.ServiceRegistrar, srv SentinelServiceServer) {
	// If the following call pancis, it indicates UnimplementedSentinelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SentinelService_ServiceDesc, srv)
}

func _SentinelService_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentinelServiceServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentinelService_KeepAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentinelServiceServer).KeepAlive(ctx, req.(*KeepAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SentinelService_GetTopicLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentinelServiceServer).GetTopicLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentinelService_GetTopicLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentinelServiceServer).GetTopicLeader(ctx, req.(*GetTopicLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SentinelService_RegisterBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterBrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentinelServiceServer).RegisterBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentinelService_RegisterBroker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentinelServiceServer).RegisterBroker(ctx, req.(*RegisterBrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SentinelService_UnregisterBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterBrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentinelServiceServer).UnregisterBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentinelService_UnregisterBroker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentinelServiceServer).UnregisterBroker(ctx, req.(*UnregisterBrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SentinelService_ServiceDesc is the grpc.ServiceDesc for SentinelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SentinelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goulette.SentinelService",
	HandlerType: (*SentinelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeepAlive",
			Handler:    _SentinelService_KeepAlive_Handler,
		},
		{
			MethodName: "GetTopicLeader",
			Handler:    _SentinelService_GetTopicLeader_Handler,
		},
		{
			MethodName: "RegisterBroker",
			Handler:    _SentinelService_RegisterBroker_Handler,
		},
		{
			MethodName: "UnregisterBroker",
			Handler:    _SentinelService_UnregisterBroker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/goulette.proto",
}
